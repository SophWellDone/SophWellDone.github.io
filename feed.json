{
    "version": "https://jsonfeed.org/version/1",
    "title": "Skullbuns Blog",
    "description": "",
    "home_page_url": "https://sophwelldone.github.io",
    "feed_url": "https://sophwelldone.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Skullbuns"
    },
    "items": [
        {
            "id": "https://sophwelldone.github.io/planking-boarders-devlog-the-final-half.html",
            "url": "https://sophwelldone.github.io/planking-boarders-devlog-the-final-half.html",
            "title": "Planking Boarders Devlog #2 - The Final Half",
            "summary": "Making Assets In the first half&nbsp;of this devlog, we went from a basic concept to a few working mechanics for&hellip;",
            "content_html": "\n    <h2 id=\"making-assets\">\n      Making Assets\n    </h2>\n\n  <p>\n    In the <a href=\"https://sophwelldone.github.io/planking-boarders.html\">first half</a>&nbsp;of this devlog, we went from a basic concept to a few working mechanics for my game Planking Boarders that won the 2025 GameX jam. The next thing I did, rather than making the game over screens like I now realise I <i>should</i> have, was making more sprites - this time the ship!\n  </p>\n\n    <h3 id=\"ship-sprite\">\n      Ship Sprite\n    </h3>\n\n  <p>\n    I had the idea to set the games zoom to 100% in the editor and take a screenshot. This was a really quick and easy way to make sure my final sprite almost exactly matches my existing collision shapes in engine, so I don't have to spend time moving all of the primitive shapes around to match a new one.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/Screenshot-2025-03-16-005613.png\" height=\"586\" width=\"1259\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-005613-xs.png 384w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-005613-sm.png 600w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-005613-md.png 768w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-005613-lg.png 1200w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-005613-xl.png 1600w\">\n      <figcaption>Importing a screenshot to Aseprite</figcaption>\n    </figure>\n\n  <p>\n    From there, I just had to clean up the lines from the screenshot and overlay some nice curved lines to form the hulls and platforms. I also used a custom brush to create the background, making it a horizontal plank pattern with small waves as the brush moves up and down.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/Ship.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      <figcaption>The stages of making the ship</figcaption>\n    </figure>\n\n    <h2 id=\"water-rehaul\">\n      Water Rehaul\n    </h2>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/Screenshot-2025-03-16-015205.png\" height=\"648\" width=\"1149\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-015205-xs.png 384w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-015205-sm.png 600w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-015205-md.png 768w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-015205-lg.png 1200w ,https://sophwelldone.github.io/media/posts/3/responsive/Screenshot-2025-03-16-015205-xl.png 1600w\">\n      <figcaption>The ship ingame - water looks weird now</figcaption>\n    </figure>\n\n  <p>\n    My plan worked! However, the water was starting to look very outdated. I essentially wanted to use two 'masks' - one for the shape of the ships background\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/Untitled.png\" height=\"456\" width=\"543\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/3/responsive/Untitled-xs.png 384w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-sm.png 600w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-md.png 768w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-lg.png 1200w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-xl.png 1600w\">\n      <figcaption>A very detailed paint diagram of the issue</figcaption>\n    </figure>\n\n  <p>\n    It took me a while to figure out how to approach this. I realised that, to make it match the ships background, making a copy of the background sprite would be a good place to start as the alpha would already match. Then all I had to do was make a quick shader set the alpha above a certain UV y-coordinate that defines how full the ship is, so anything above a certain point was transparent.\n  </p>\n\n  <p>\n    This meant I had to do a bit of maths to convert between how high I wanted the water to be physically in the game, and then send that to the water shader to calculate where that position would lie within the UV\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/Untitled-2.png\" height=\"727\" width=\"1294\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/3/responsive/Untitled-2-xs.png 384w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-2-sm.png 600w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-2-md.png 768w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-2-lg.png 1200w ,https://sophwelldone.github.io/media/posts/3/responsive/Untitled-2-xl.png 1600w\">\n      <figcaption>A y-position in pixels goes in, a UV is calculated and used for the shader</figcaption>\n    </figure>\n\n  <p>\n    I was implementing this change, but realised it was somewhat unnecessary. As I wanted to define the time in seconds it takes to fill the ship fully rather than the 'pixels per second' of the water rising, i could just use my existing variable and pass that directly to the shader.\n  </p>\n<pre class=\" language-gdscript\"><code>func _process(delta: float) -&gt; void:\n\tvar fill_this_frame = get_fill_per_second(current_hole_count)\n\tvar delta_progress = fill_this_frame * delta\n\twater_progress = clamp(water_progress + delta_progress, 0.0, 1.0)\n\t(water_sprite.material as ShaderMaterial).set_shader_parameter('current_fill_progress', water_progress)</code></pre>\n\n  <p>\n    In the end, it only took one extra line of code in the waters script to update the shader! The last thing i wanted to do was to add a bit of maths to stop the water looking too flat. I decided to use the old reliable - sine waves - to add a slight ripple to the interior water. All this does is move the 'cut off uv coordinate' for making the pixel invisible. The shader itself is only&nbsp;\n  </p>\n<pre class=\" language-glsl\"><code>// This is a 2D shader for the interior water of the ship.\nshader_type canvas_item;\n\n//This shader should be applied to a copy of a ships background sprite.\n// It will take the ships water fill progress as a float between 0.0 (0%) and 1.0% (100%)\n\n\n//Rather than using UV 0.0 - 1.0 as the range, we can set custom limits between.\n//min_fill_y lets there be a slight bit of water visible even when the ship is empty.\n//max_fill_y lets there be air in the top even when the ship is considered full.\n// This lets the ship sink before the whole sprite is used, which would cut off\n// the waves.\nuniform float max_fill_y : hint_range(0, 1) = 0.5;\nuniform float min_fill_y : hint_range(0, 1) = 1.0;\n\n// This is what is passed into the shader each frame.\nuniform float current_fill_progress : hint_range(0, 1) = 1.0;\n\nuniform sampler2D water_depth_gradient;\n\n// Defines the horizontal speed, wavelength and height for sine waves\nuniform bool disable_waves;\nuniform float ripple_speed = 0.9;\nuniform float ripple_length = 0.1;\nuniform float ripple_depth = 0.02;\n\n\n// Add a sine wave offset to the waters maximum visual height.\nfloat get_wave_height(float uv_x){\n\tif (disable_waves){\n\t\treturn 0.0;\n\t}\n\n\tfloat time_offset = TIME * ripple_speed;\n\treturn sin((uv_x/ripple_length) + time_offset)*ripple_depth*current_fill_progress;\n}\n\n// Called on each pixel rendered.\nvoid fragment() {\n    \n    //Lerp the water progress between a nicer uv range defined in parameters.\n\tfloat uv_fill_progress = mix(min_fill_y, max_fill_y, current_fill_progress);\n\n\t//Use get_wave_height() to check if this pixel is above the waves height or not\n\tif (UV.y - get_wave_height(UV.x) &lt; uv_fill_progress){\n\t\tCOLOR.a = 0.0; // Pixel is higher than wave - make transparent\n\t}\n}\n</code></pre>\n\n  <p>\n    This shader is one of my favourite parts about this game. It creates a really convincing effect when shown in the final game, as the water inside the ship has its own separate<strong></strong> waves and height. It helps it feels more like a room that is flooding rather than just a copy of the ocean outside that is moved up or down.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/SinWAVES.gif\" height=\"859\" width=\"1497\" alt=\"\" >\n      <figcaption>Playing with the progress and wave height variables!</figcaption>\n    </figure>\n\n    <h2 id=\"additional-water-details\">\n      Additional Water Details\n    </h2>\n\n  <p>\n    There is two additional detail to this games 'interior water' inside the ship. Firstly, I mapped the water below the waves to a slight gradient, making the bottom of the water darker.\n  </p>\n\n  <p>\n    The other main detail is that the cannonball holes were given particles that adapt to the waters height. If the water is low, leaking water particles are shown dropping into the water as it slowly fills. If the water is higher than the cannonball hole, however, it will actually create bubble particles as trapped air rushes through the hole from the outside. This small change added such a realistic effect and create a sense of urgency and panic as the bubbles begin to rise. I'm super happy with how they look!\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/BubblesVERYFANCY.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      <figcaption>Droplets turn to bubbles - we're going down!!</figcaption>\n    </figure>\n\n  <p>\n    One of my biggest regrets with this game is never getting round to music and SFX, because a rushing bubbling sound would really help sell the effect even more.\n  </p>\n\n    <h2 id=\"navy-boarders\">\n      Navy Boarders\n    </h2>\n\n  <p>\n    This devlog is getting long and I still want to talk about the difficulty and the extremely stressful final morning, so I'll keep this section short since the code is quite simple. That being, the boarders will follow a path at a set speed and if they reach the end of the path you loose. The main time sink for them was animating. To stick with the anthropromorphic theme of the characters, I chose my second favourite animal - cats - to be the boarders!\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/NavyAnimations.gif\" height=\"755\" width=\"923\" alt=\"\" >\n      <figcaption>Reusing animation is much more efficient!</figcaption>\n    </figure>\n\n  <p>\n    Most of their animations are reused from the player, the only difference being a fall animation replacing the jump and giving them a custom head shape and colour palette to match.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/ProgressLastNight.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      \n    </figure>\n\n  <p>\n    This was my progress on the last night before the deadline. The animations were all implemented, although whacking them off the ship didn't quite work yet. Oh, and the weird Godot robot face in the floor was the nail trap mechanic where you could use nails to slow down boarders. Unfortunately I never got time to finalise so it was scrapped!\n  </p>\n\n    <h2 id=\"difficulty\">\n      Difficulty\n    </h2>\n\n  <p>\n    So how do you make a fun difficulty curve for an endless game? You've already read the answer I landed on - <em>curves</em>! Godot has a really nice inbuilt resource called a Curve2D that lets you create and sample 2D Bezier curves.\n  </p>\n\n  <p>\n    All the difficulty does is sample curves, where the x axis is set to the time since the game started in minutes and the y axis is some value that gets harder to keep up with (shorter time between holes breaking, faster water fill speed etc.)\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/3/difficulties-2.png\" height=\"723\" width=\"256\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/3/responsive/difficulties-2-xs.png 384w ,https://sophwelldone.github.io/media/posts/3/responsive/difficulties-2-sm.png 600w ,https://sophwelldone.github.io/media/posts/3/responsive/difficulties-2-md.png 768w ,https://sophwelldone.github.io/media/posts/3/responsive/difficulties-2-lg.png 1200w ,https://sophwelldone.github.io/media/posts/3/responsive/difficulties-2-xl.png 1600w\">\n      <figcaption>A snippet of difficulties - example explained below is in red brackets!</figcaption>\n    </figure>\n\n  <p>\n    In the example above, the Cannon Hole Break Timer curve starts at (0.0, 45.0). This means that, at 0.0 minutes into the game, it takes a whole 45 seconds for a cannon hole to break after being repaired. This curve descends as time goes on, making the break happen faster and faster and therefore the game harder. At the end of the curve, (7.0, 10.59), we have reached the maximum break speed, with repairs only lasting a measly 10.59 seconds.\n  </p>\n\n  <p>\n    Most of the games main variables that involve time and tasks follow curves, the main exception being nails *always* adding 5.0s to the timer before one of you repairs break since it is already a small number.\n  </p>\n\n    <h2 id=\"the-messtm\">\n      The mess™️\n    </h2>\n\n  <p>\n    This is where everything fell apart for the last few hours. I learned a very important lesson with this since it almost cost my entry to the jam entirely - <b>Do NOT leave your export until the last few hours!</b>\n  </p>\n\n  <p>\n    My game would work fine in the editor but, upon exporting it and playing it on itch.io, it completely broke. The game would load but nothing would happen - the water was full, you couldn't repair anything, no holes broke and no navy boarders appeared. After spending the last few hours of the jam frantically trying to cross reference errors and scripts, it all lead to the most recent updates to the difficulty. I finally found the error below\n  </p>\n<pre class=\" language-gdscript\"><code>load(some_resource_type) #THIS IS BAD AND ONLY WORKS IN EDITOR FOR RESOURCES! \n# When game is  exported the custom resources are\n# converted to binary and have a different file location/type.\n\nResourceLoader.load(some_resource_type) #this is what I should have used!\n\n\n</code></pre>\n\n  <p>\n    and implementing this tiny change fixed everything. With that one line of code, I could finally relax for the first time in 3 days.\n  </p>\n\n    <h2 id=\"final-thoughts\">\n      Final Thoughts\n    </h2>\n\n  <p>\n    A few days pass, I try a few of the other games and they are really fun! I like to leave a balanced comment with both what I like and my personal suggestion\n  </p>\n\n  <p>\n    Overall, I am extremely happy I both had this opportunity and decided to participate. Game jams are such a close thing to my heart due to so many reasons - the great community and networking opportunities, the forced creativity of having a theme and time limit, the constructive feedback, the friendly competition. It's everything you need to both get the motivation and iterative comments / advice for making a game and I will always highly recommend joining them for any person interested in any role in the games industry.\n  </p>\n\n  <p>\n    Thanks for reading my little devlog/recounting/tutorial(?),\n  </p>\n\n  <p>\n    Sophie&nbsp;\n  </p>",
            "image": "https://sophwelldone.github.io/media/posts/3/Screenshot-2025-03-17-035418.png",
            "author": {
                "name": "Skullbuns"
            },
            "tags": [
                   "Game Jams",
                   "2025"
            ],
            "date_published": "2025-03-29T18:52:46+00:00",
            "date_modified": "2025-03-30T22:02:16+01:00"
        },
        {
            "id": "https://sophwelldone.github.io/planking-boarders.html",
            "url": "https://sophwelldone.github.io/planking-boarders.html",
            "title": "Planking Boarders Devlog #1 - Intro + First Half",
            "summary": "Planking Boarders is a game about keeping a ship afloat by juggling two tasks: repairing cannonball holes on the bottom&hellip;",
            "content_html": "\n  <p>\n    Planking Boarders is a game about keeping a ship afloat by juggling two tasks: repairing cannonball holes on the bottom deck and fighting navy boarders on the top deck. Its a very frantic, silly and cartoony experience! It is also my entry I submitted to a game jam my university hosted in my first year of my course and managed to win it!\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/peak.png\" height=\"376\" width=\"1000\" alt=\"A screenshot of the announcement that Planking Boarders, my submission, had won the GameX games jam\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/peak-xs.png 384w ,https://sophwelldone.github.io/media/posts/2/responsive/peak-sm.png 600w ,https://sophwelldone.github.io/media/posts/2/responsive/peak-md.png 768w ,https://sophwelldone.github.io/media/posts/2/responsive/peak-lg.png 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/peak-xl.png 1600w\">\n      <figcaption>I physically jumped out of my chair in excitement after reading this</figcaption>\n    </figure>\n\n  <p>\n    I am very proud of what I achieved with Planking Boarders. After competing in 10s of game jams before starting my course, it was extremely fulfilling to have all that past experience lead me to win this jam in my very first year!\n  </p>\n\n  <p>\n    &nbsp;If you want to <a href=\"https://skullbuns.itch.io/planking-boarders\" target=\"_blank\">you can play it on my itch.io </a>- no downloads required!\n  </p>\n\n  <p>\n    The rest of this post and following posts are essentially a small devlog of the first half of how I made my entry including the design process, any issues I faced and how I resolved them.\n  </p>\n\n    <h1 id=\"day-1\">\n      Day 1\n    </h1>\n\n  <p>\n    During the first year of my game design course, I attended the yearly GameX conference. Guest speakers from across the game industry - developers, designers, voice actors - are all invited in to talk and answer questions about their experiences in industry. This was already a really fun and educational experience, but the real cherry on top personally was learning that as part the games course lecturers were hosting a game jam open to all students!\n  </p>\n\n  <p>\n    I knew I had to enter it. I decided I would try tackling this one solo. I had done several game jams before this one alone and felt that I would find it easier to do this one alone too, mainly to avoid communication or team management problems that I couldn't afford in a the short 3 day deadline.&nbsp;\n  </p>\n\n    <h2 id=\"brainstorming-and-planning\">\n      Brainstorming and Planning\n    </h2>\n\n  <p>\n    On the last day of the event, the theme was unveiled - <b>'Boarders'</b>.\n  </p>\n\n  <p>\n    Usually when I am told it's theme, I like to create and suggest a few ideas for a game jam entry. Then, I/we pick the teams overall favourite and focus on just that one. This time, however, I immediately had two ideas before I even left the conference hall that felt like they would work perfectly together.\n  </p>\n\n  <ol>\n    <li>Boarders as in people <b>boarding </b>a pirate ship Pirates of the Caribbean style.</li><li>Boarders as in people desperately <b>boarding </b>up cannonball holes in a ship to keep it afloat.</li>\n  </ol>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/unnamed.jpg\" height=\"512\" width=\"236\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/unnamed-xs.jpg 384w ,https://sophwelldone.github.io/media/posts/2/responsive/unnamed-sm.jpg 600w ,https://sophwelldone.github.io/media/posts/2/responsive/unnamed-md.jpg 768w ,https://sophwelldone.github.io/media/posts/2/responsive/unnamed-lg.jpg 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/unnamed-xl.jpg 1600w\">\n      <figcaption>Screenshot of my phone with all the ideas buzzing through my head immediately after the announcement!</figcaption>\n    </figure>\n\n  <p>\n    The game loop I was imagining was meant to be silly and stressful at the same time, like something you would see in an animated kids cartoon. The rules of the game were:\n  </p>\n\n  <ul>\n    <li>The goal of the game is to keep the ship afloat as long as possible.</li><li>To achieve this goal, you must successfully complete tasks such as repairs to delay the ship sinking.</li><li>Each task takes time to physically travel to.</li><li>The game is single player, so you must decide what order every task is approached</li><li>The difficulty comes from prioritising what order to do tasks on the fly as new ones pop up faster and faster.</li><li><s>A minigame should be present for each task to add more skill to the game</s></li>\n  </ul>\n\n  <p>\n    I laid out a few more quick aesthetic design choices that enforced this intended experience, such as making the game 2D and the characters anthropomorphic animals - really just hone in on the Looney Tunes vibes!\n  </p>\n\n  <p>\n    Programming wise, it was a 3 day game jam with no restriction on tools used. This meant I was almost certainly going to use the Godot engine as the game engine and GDscript for the code due to my personal experience and preference. Godot is also very lightweight to allow for quickly iterating on, building and testing my games mechanics.\n  </p>\n\n    <h3 id=\"game-design\">\n      Game Design\n    </h3>\n\n  <p>\n    As the main goal of the game is managing your time based on where you are and how long it takes to get somewhere, I started by designing the physical space where all of these rules would take place - the ship!\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/Screenshot-2025-03-14-190811.png\" height=\"601\" width=\"877\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-14-190811-xs.png 384w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-14-190811-sm.png 600w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-14-190811-md.png 768w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-14-190811-lg.png 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-14-190811-xl.png 1600w\">\n      <figcaption>An empty ship with two decks to help spread everything out!</figcaption>\n    </figure>\n\n  <p>\n    I realised here that I could have one task for each of the two decks. This keeps the game simple to make as I only need to write code and make assets for two tasks, but also keeps the game easy to learn for people who are quickly trying out all the game jam entries. Below is an update the diagram above, with sketches and text to explain what the two tasks are and what the loss condition is.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/ShipConcept1.png\" height=\"2480\" width=\"3508\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept1-xs.png 384w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept1-sm.png 600w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept1-md.png 768w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept1-lg.png 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept1-xl.png 1600w\">\n      <figcaption>The ship layout sketched. Each deck has its own task, and each task can cause the player to lose if not dealt with.</figcaption>\n    </figure>\n\n  <p>\n    This was where mentally visualising the game became much easier. I imagined a player patching a leaking cannonball hole before dashing up to whack a boarder of the ship, only to immediately run back downstairs to patch another hole that just split open again.\n  </p>\n\n  <p>\n    To add a little more complexity to the game, I added planks and nails as physical resources used when completing tasks. This may have been one of my bigger mistakes as it created new UI, variables and assets I was already going to struggle to get done. It was like adding a new task but for the creation of the game, not the game itself! However, it did make the game more complex without adding minigames which would have been even worse.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/ShipConcept2.png\" height=\"2480\" width=\"3508\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept2-xs.png 384w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept2-sm.png 600w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept2-md.png 768w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept2-lg.png 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipConcept2-xl.png 1600w\">\n      <figcaption>Introducing barrels to the game</figcaption>\n    </figure>\n\n  <p>\n    The planks were the most important resource, and would be used to either repair a hole or whack a boarder off the ship completely. The catch was that you could only carry one plank and only use it once before needing to return to a wood barrel to restock. Nails were similar, but had multiple uses and would delay rather than complete a task. This was reinforcing your wooden repairs in the bottom deck, or laying out nail traps to slow the boarders on the top deck - the latter never saw the light of the day due to running out of time.&nbsp;\n  </p>\n\n    <h2 id=\"prototyping\">\n      Prototyping\n    </h2>\n\n    <h3 id=\"ship-hull-and-platforms\">\n      Ship Hull and Platforms\n    </h3>\n\n  <p>\n    With the design now fleshed out, I started the whiteboxing process of making it in the game engine. To save time, I just worked with collision shapes which I could make assets for later.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/ShipLayout.png\" height=\"248\" width=\"512\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/ShipLayout-xs.png 384w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipLayout-sm.png 600w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipLayout-md.png 768w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipLayout-lg.png 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/ShipLayout-xl.png 1600w\">\n      <figcaption>Ship Layout as boxes</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/Screenshot-2025-03-15-002300.png\" height=\"593\" width=\"1063\" alt=\"\"  sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-15-002300-xs.png 384w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-15-002300-sm.png 600w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-15-002300-md.png 768w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-15-002300-lg.png 1200w ,https://sophwelldone.github.io/media/posts/2/responsive/Screenshot-2025-03-15-002300-xl.png 1600w\">\n      \n    </figure>\n\n  <p>\n    The pink boxes are platforms, which can be passed through by pressing a 'crouch' key. This lets you walk up the stairs and over the front of the top deck without making the lower deck inaccessible. As Godot supports one-way platforms by default, all i had to do is disable the platforms collisions when the button is pressed, and re-enable it once the player has passed through.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/OneWayPlatforms.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      \n    </figure>\n\n    <h3 id=\"interior-water\">\n      Interior Water\n    </h3>\n\n  <p>\n    Next I worked on the water filling the ship. As i was using Godot's Polygon2D nodes, it was quite easy code-wise as I could just modify the top left and top right points of a rectangle to slowly rise\n  </p>\n<pre class=\" language-gdscript\"><code># 'start_height_marker' is a 2d marker for where the water height should start\n# 'final_height_marker' is a 2d marker for where the water height will cause a\n# game over.\n# I chose to lerp between positions as I could make the variables time based\n# rather than guessing how long it would take based on a 'pixels per second'\n# basis.\n\nfunc _process(delta: float) -&gt; void:\n \tvar fill_this_frame = get_fill_per_second(current_hole_count)\n \twater_progress = clamp(water_progress + fill_this_frame * delta, 0.0, 1.0)\n \t\n \tvar water_height : float = lerp(start_height_marker.global_position.y,\n \tfinal_height_marker.global_position.y, water_progress)\n \t\n \twater_poly.polygon[0].y = water_height\n \twater_poly.polygon[1].y = water_height</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/WaterRising.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      <figcaption>Water rising - spooky!!</figcaption>\n    </figure>\n\n    <h3 id=\"cannonball-holes\">\n      Cannonball Holes\n    </h3>\n\n  <p>\n    I wanted cannonballs to stay static and keep breaking apart rather than new ones forming. This helps keep the game a bit more predictable when playing and also when designing the conditions for the endless difficulty as there is no random 'spawn locations' each time a hole appears that could make that hole much quicker or slower to repair.\n  </p>\n\n    <h4 id=\"repairs\">\n      Repairs\n    </h4>\n\n  <p>\n    Cannonballs have 3 states - open, boarded and boarded and nailed. The last two ended up being essentially the same, as nails only add some time before the board breaks, with the only difference being the sprite. The ship only fills when it the hole is open. Because of the calculation below, most of the code associated with each cannonball is just changing the sprite and adding the UI to show your current materials.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/WaterStopping.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      \n    </figure>\n\n    <h4 id=\"fill-speed-calculation\">\n      Fill Speed Calculation\n    </h4>\n\n  <p>\n    As shown in the previous water code snippet, there is a function for calculating the fill progress per second. If I just multiplied the speed of water filling the ship, x, by the number of holes, it would linearly increase - one hole would do x% per second, two holes would do 2x% per second and zero holes would not fill the ship as 0 * x is just 0. This is fine, but quite unforgiving if multiple holes break open in quick succession.\n  </p>\n\n  <p>\n    Instead of linearly increasing, the fill speed is calculated based on a predetermined curve. The values below are the array that the get_fill_per_second() function uses.\n  </p>\n<pre class=\" language-gdscript\"><code># stops multiple holes being unfairly quick (2x, 3x, 4x etc.)\nvar fill_speed_multiplier : Array[float] = [\n\t0.0, #0 holes\n\t1.0, #1 hole\n\t1.6, #2 holes, so on..\n\t2.0\n]</code></pre>\n\n    <h2 id=\"first-assets\">\n      First Assets\n    </h2>\n\n  <p>\n    To finish day one, I started making some assets for the player. Doing nothing but code was tiring, and it was nice to get a big complex task like animating all the walking and jumping done ASAP.\n  </p>\n\n  <p>\n    I knew the characters resolution would be about 128x64 pixels due to the collision shapes size. I also quickly decided on using Aseprite to make the pixel art for the game as it is both familiar and very good at creating sprite sheets to add animations in the engine.\n  </p>\n\n  <div  class=\"gallery-wrapper\">\n    <div class=\"gallery\" data-columns=\"3\">\n      <figure class=\"gallery__item\">\n      <a href=\"https://sophwelldone.github.io/media/posts/2/gallery/char.png\" data-size=\"512x367\">\n        <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/gallery/char-thumbnail.png\" height=\"367\" width=\"512\" alt=\"An outline for the character, and it fits the collision shape!\" >\n      </a>\n      \n    </figure>\n    </div>\n  </div>\n\n  <p>\n    Now knowing the sprite fits, I moved on to animation. I created the character with basic and disconnected round shapes as it is much easier to animate their limbs since i only need to move the position of each layer (left hand, right hand etc.) and slightly alter the shape to give a convincing motion effect. Below is an example, with each of the 6 layers given a different colour&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/CharacterUnclean.gif\" height=\"640\" width=\"640\" alt=\"\" >\n      <figcaption>Cute and efficient walk cycle :)</figcaption>\n    </figure>\n\n    <h2 id=\"halfway-point-progress\">\n      Halfway Point Progress\n    </h2>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://sophwelldone.github.io/media/posts/2/BunnyAnimated.gif\" height=\"650\" width=\"1154\" alt=\"\" >\n      \n    </figure>\n\n  <p>\n    This was how the game looked half way through, about one and a half days worth of progress compressed into one little gif. I was happy with my progress, but very wary that I had the whole top deck to do still, along with alot of time needed for drawing the ship and making a nice title screen and finalising the game loop with loss conditions. Notice how the 'finalising the game loop with loss conditions' was the last thing on that list. I should have prioritised that task much higher, as you will find out in the last half.\n  </p>\n\n  <p>\n    You can find the <a href=\"https://sophwelldone.github.io/planking-boarders-devlog-the-final-half.html\">second half of this devlog here</a>, where i go over some of my favourite features and the most terrible bugs of the entire experience developing this game!\n  </p>",
            "image": "https://sophwelldone.github.io/media/posts/2/THWACKED.png",
            "author": {
                "name": "Skullbuns"
            },
            "tags": [
                   "Game Jams",
                   "2025"
            ],
            "date_published": "2025-03-29T01:05:10+00:00",
            "date_modified": "2025-03-30T22:02:57+01:00"
        }
    ]
}
